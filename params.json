{"name":"LLL","tagline":"A Lightweight LLDB Frontend based on PyQt","body":"LLL - A Lightweight LLDB Frontend based on PyQt\r\n---\r\n\r\n## Motivation:\r\nLinux users does not have much choices for debugging C/C++ code. Commonly available debuggers include gdb and lldb, both of them are commandline debugger. They are neither user friendly nor productive. \r\nGUI frontend includes Eclipse CDT, DDD. Eclipse is too heavy and DDD has no tabbed source code viewer. \r\n\r\n## Goals:\r\nLLL is designed to be a lightweight LLDB GUI frontend based on Qt. It should support:\r\n1) Convenient debugging and simple in-place source code modification\r\n2) Windows to show call stack, watched variables, register values, memory data, etc.\r\n3) Mixing the display of souce code and disassembled instructions in the same window\r\n4) Remote debugging\r\n5) Suppport debugging multi-threaded programs\r\n6) Good looking UI\r\n\r\n## Usage:\r\n1) Modify lll.ini to set the path of clang and lldb.\r\n2) lll.py [exe file] [args]...\r\n\r\n## Requirements:\r\nQt 4.0\r\nPython 2.7\r\nClang (for syntax hightlighting)\r\nLLDB\r\n\r\n## Current Status:\r\nVery basic debugging support\r\n\r\n## Tested on:\r\nLinux Arch on x86-64\r\n\r\n## Screenshot:\r\n![main_workspace](http://i.imgur.com/VnYSZ1s.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}